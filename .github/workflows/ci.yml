name: Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: "18"
  PYTHON_VERSION: "3.9"

jobs:
  # Tests Backend
  backend-tests:
    runs-on: ubuntu-latest
    name: Backend Tests

    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: Backend/package-lock.json

      - name: Install dependencies
        working-directory: ./Backend
        run: npm ci

      - name: Run linting
        working-directory: ./Backend
        run: npm run lint || true

      - name: Run tests
        working-directory: ./Backend
        run: npm test
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/ecoshare_test

  # Tests Frontend
  frontend-tests:
    runs-on: ubuntu-latest
    name: Frontend Tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: Frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./Frontend
        run: npm ci

      - name: Run linting
        working-directory: ./Frontend
        run: npm run lint || true

      - name: Run tests
        working-directory: ./Frontend
        run: npm test -- --coverage --watchAll=false

      - name: Build application
        working-directory: ./Frontend
        run: npm run build

  # Tests AI Service
  ai-tests:
    runs-on: ubuntu-latest
    name: AI Service Tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Install dependencies
        working-directory: ./AI-Service
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run tests
        working-directory: ./AI-Service
        run: pytest tests/ --cov=. --cov-report=xml
        env:
          FLASK_ENV: test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./AI-Service/coverage.xml
          flags: ai-service
          token: ${{ secrets.CODECOV_TOKEN }}

  # Tests d'int√©gration
  integration-tests:
    runs-on: ubuntu-latest
    name: Integration Tests
    needs: [backend-tests, frontend-tests, ai-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and test with Docker Compose
        run: |
          docker-compose -f docker-compose.test.yml up --build --abort-on-container-exit
        env:
          COMPOSE_PROJECT_NAME: ecoshare-test

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            test-results/
            coverage/
