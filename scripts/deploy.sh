#!/bin/bash

# Script de d√©ploiement ECOSHARE
set -e

# Configuration
ENVIRONMENT=${1:-staging}
VERSION=${2:-latest}
REGISTRY="ghcr.io/ziedtabib/ECOSHARE"

echo "üöÄ D√©ploiement ECOSHARE - Environment: $ENVIRONMENT, Version: $VERSION"

# Fonction pour v√©rifier les pr√©requis
check_prerequisites() {
    echo "üîç V√©rification des pr√©requis..."
    
    if ! command -v docker &> /dev/null; then
        echo "‚ùå Docker n'est pas install√©"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        echo "‚ùå Docker Compose n'est pas install√©"
        exit 1
    fi
    
    echo "‚úÖ Pr√©requis v√©rifi√©s"
}

# Fonction pour sauvegarder la base de donn√©es
backup_database() {
    echo "üíæ Sauvegarde de la base de donn√©es..."
    
    if [ "$ENVIRONMENT" = "production" ]; then
        docker exec ecoshare-mongodb mongodump --out /backup/$(date +%Y%m%d_%H%M%S)
        echo "‚úÖ Sauvegarde cr√©√©e"
    fi
}

# Fonction pour arr√™ter les services
stop_services() {
    echo "üõë Arr√™t des services existants..."
    docker-compose down
    echo "‚úÖ Services arr√™t√©s"
}

# Fonction pour mettre √† jour les images
update_images() {
    echo "üì¶ Mise √† jour des images Docker..."
    
    # Pull des nouvelles images
    docker-compose pull
    
    # Build des images locales si n√©cessaire
    docker-compose build --no-cache
    
    echo "‚úÖ Images mises √† jour"
}

# Fonction pour d√©marrer les services
start_services() {
    echo "üöÄ D√©marrage des services..."
    
    # D√©marrer les services
    docker-compose up -d
    
    # Attendre que les services soient pr√™ts
    echo "‚è≥ Attente du d√©marrage des services..."
    sleep 30
    
    # V√©rifier la sant√© des services
    check_health
    
    echo "‚úÖ Services d√©marr√©s"
}

# Fonction pour v√©rifier la sant√© des services
check_health() {
    echo "üîç V√©rification de la sant√© des services..."
    
    # V√©rifier le backend
    if ! curl -f http://localhost:5000/api/health > /dev/null 2>&1; then
        echo "‚ùå Backend non disponible"
        exit 1
    fi
    
    # V√©rifier le frontend
    if ! curl -f http://localhost:80 > /dev/null 2>&1; then
        echo "‚ùå Frontend non disponible"
        exit 1
    fi
    
    # V√©rifier l'AI service
    if ! curl -f http://localhost:5001/health > /dev/null 2>&1; then
        echo "‚ùå AI Service non disponible"
        exit 1
    fi
    
    echo "‚úÖ Tous les services sont op√©rationnels"
}

# Fonction pour nettoyer les ressources inutilis√©es
cleanup() {
    echo "üßπ Nettoyage des ressources inutilis√©es..."
    
    # Supprimer les images inutilis√©es
    docker image prune -f
    
    # Supprimer les volumes inutilis√©s
    docker volume prune -f
    
    echo "‚úÖ Nettoyage termin√©"
}

# Fonction pour envoyer des notifications
send_notification() {
    local status=$1
    local message=$2
    
    echo "üìß Envoi de notification: $status"
    
    # Ici vous pouvez ajouter l'envoi d'emails, Slack, Discord, etc.
    # Exemple avec curl vers un webhook:
    # curl -X POST -H 'Content-type: application/json' \
    #      --data "{\"text\":\"ECOSHARE Deployment $status: $message\"}" \
    #      $SLACK_WEBHOOK_URL
    
    echo "‚úÖ Notification envoy√©e"
}

# Fonction principale
main() {
    echo "üéØ D√©but du d√©ploiement ECOSHARE"
    
    check_prerequisites
    backup_database
    stop_services
    update_images
    start_services
    cleanup
    
    echo "üéâ D√©ploiement termin√© avec succ√®s!"
    send_notification "SUCCESS" "D√©ploiement r√©ussi sur $ENVIRONMENT"
}

# Gestion des erreurs
trap 'echo "‚ùå Erreur lors du d√©ploiement"; send_notification "FAILED" "Erreur lors du d√©ploiement sur $ENVIRONMENT"; exit 1' ERR

# Ex√©cution
main "$@"
